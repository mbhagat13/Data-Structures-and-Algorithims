#include <stdlib.h>
#include <stdio.h>

typedef struct states{
		char id;
		struct states * next0;
		struct states * next1;
		int delete;
	} state;

void initialize_states (state fsm[])
{
	int i = 0;
	fsm[0].id = 'A';
	fsm[1].id = 'B';	
	fsm[2].id = 'C';
	fsm[3].id = 'D';
	fsm[4].id = 'E';
	fsm[5].id = 'F';
	fsm[6].id = 'G';

		fsm[0].next0 = &(fsm[1]);
		fsm[0].next1 = &(fsm[2]);

		
	
		fsm[1].next0 = &(fsm[4]);
		fsm[1].next1 = &(fsm[5]);

		

		fsm[2].next0 = &(fsm[0]);
		fsm[2].next1 = &(fsm[4]);

		

		fsm[3].next0 = &(fsm[7]);
		fsm[3].next1 = &(fsm[6]);


		fsm[4].next0 = &fsm[3];
		fsm[4].next1 = &(fsm[4]);

		
		fsm[5].next0 = &(fsm[6]);
		fsm[5].next1 = &(fsm[0]);
	
		
		fsm[6].next0 = &(fsm[2]);
		fsm[6].next1 = &(fsm[7]);

		

		fsm[7].next0 = &(fsm[5]);
		fsm[7].next1 = &(fsm[1]);


			for (i = 0; i< 7; i++){
			fsm[i].delete = 0;
			}
}	

void print_s(state fsm[]){
	int i=0;
	state * next0;
	state * next1;
	next0 = &fsm[0];
	next1 = &fsm[0];
	for(i=0;i<8;++i){
		if(fsm[i].delete==0){
			printf("%c ",fsm[i].id);
			next0 = &fsm[i];
			next1 = &fsm[i];
			next0 = next0->next0;
			next1 = next1->next1;
			printf("%c ", next0->id);
			printf("%c ", next1->id);
			printf("\n");
		}
	}
}


void change_states(state present, char arr[]){
	int stateNum=0;
	switch (arr[1]){
		case '0':
			stateNum = arr[3] - present[0].name;
			if(present[stateNum].del==0){
				present->next0 = &present[stateNum];
			}
			else
			printf("Error: State %c deleted.\n", input[3]);
			break;
		case '1':
			stateNum = input[3] - present[0].name;
			if(present[stateNum].del==0){
				present->next1 = &present[stateNum];
			}
			else
			printf("Error: State %c deleted.\n", input[3]);
			break;
		}
}





int main(int argc, char * argv[])
{

	state fsm[8];
	state *present;
	char arr[5];
	char command = '-';

	initialize_states (fsm);
	
	present = &fsm[5];
	
	printf("Initial State: %c\n",present->id);

	while (command != 'e'){
	command = getc(stdin);
	if (command == '0'){
	printf("%c\n", (present->next0)->id);				
	} else if (command == '1'){
	printf("%c\n", (present->next1)->id);				
	}else if (command == 'P'){
	print_s (fsm);
	}
	
	else if (command == 'G'){
	garbage_i(fsm);
	print_g (fsm);
	
	}
	else if (command == 'C'){
	arr[0]=getchar();
	arr[1]=getchar();
	arr[2]=getchar();
	arr[3]=getchar();
	arr[4]=getchar();
	
	change_states(present,arr);
	garbage_i(fsm);

	}

	else if (command == 'D'){
	delete(fsm);
	}
	
	

	
	}





    exit(0);
}

